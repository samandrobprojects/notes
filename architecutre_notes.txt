The major concerns of architecture:
 - Function                       - Does it work the way we want
 - Seperation of Components       - Is everything seperated out properly
 - Data Management                - Our programs are just control and data

Paradigms
---------
Each paradigm removes capabilities from the programmer, imposing extra discipline on the programmer. They less tell the programmer
what to do, and more tell the programmer what not to do.

1. Structured Programming: Algorithmic foundation of our modules
2. OO: Polymorphism is the mechanism to cross architectural boundaries.
3. Functional programming: Impose discipline on location of and access to data

Structered Programming
----------------------
Unrestrained use of goto made proofs for programs difficult, making them unable to be broken down into smaller units. Instead,
the "if else" and "do/while" constructs exclusively represent all options, as well as allow programs to be decomposed into smaller
units.

Three constructs can represent all programs, selection, iteration, and sequence. The exact structures that make a program proveable,
are also the minimum neccessary to represent them.

Science does not work by proving statements true, but rather by proving statements false. I.e "falsifiable, not proveable".

Dijstra said that tests show the presence, not the absence, of bugs. A program can hence be proven incorrect by a test, but
not proven correct.

What we achieve with structered programming is hence two things:
1. Falsifiable units, and hence testable units, otherwise testing would be impossible
2. Functional decomposition, which makes everything possible.

-> In conclusion, imposes discipline on direct transfer of control

Object Oriented Programming
---------------------------
What is OO? On unsatisfactory answer is "combination of data and function", but this is unsatisfying, because it implies
f(o) is somehow different from o.f(). People were still passing data structures into functions.

Encapsulation?
This is saying that outside of a point the data is hidden and only some functions are avaliable.
Well, we actually have perfect encapsulation in C.

I.e if we consider the following to be point.h

struct Point;
struct Point* makePoint(double x, double y);
double distance(struct Point *p1, struct Point *p2);

(Martin, Robert C.. Clean Architecture (Robert C. Martin Series) (p. 35). Pearson Education. Kindle Edition.)

In Java, they abolished the header/implementation split altogether, so there is not perfect encapsulation there either.

Inheritance?
This is simply the redeclaration of a group of variables and functions within an enclosing scope.

int main(int ac, char** av) {
  struct NamedPoint* origin = makeNamedPoint(0.0, 0.0, "origin");
  struct NamedPoint* upperRight = makeNamedPoint (1.0, 1.0, "upperRight");
  printf("distance=%f\n",
    distance(
             (struct Point*) origin, 
             (struct Point*) upperRight));
}

Martin, Robert C.. Clean Architecture (Robert C. Martin Series) (p. 39). Pearson Education. Kindle Edition. 

This shows in C some trickery, since we can cast one to the other and use it in the same way, but we are also forced to
use explicit casting, which is not as neat as the implicit casting with inheritance in OO.

Polymorphism?
Did polymorphism exist before OO? yes, it existed using some function pointer trickery.

extern struct FILE* STDIN;
Â  int getchar() {
  return STDIN->read();
}

I.e you set STDIN to anything that is a FILE structure, then this function updates

Martin, Robert C.. Clean Architecture (Robert C. Martin Series) (p. 42). Pearson Education. Kindle Edition. 

-> In conclusion, imposes discipline on indirect transfer of control, because before with function pointers we could
   do anything

Dependancy Inversion
OO is the ability (through polymorphism) to gain absoloute control over every source code dependancy in the system.

Functional Programming
----------------------
Immutability and Architecture? All race conditions, deadlocks, and concurrentupdate problems are due to mutable variables.

Is immutability practiceable?
If you have infinite processor speed and space, since you do not update state, instead you store the entire list of transactions.

If we are talking about the "segregation of immutability", often a transactional memory is used to prevent concurrency issues.
I.e the compare and swap scheme, which means keep retrying the operation if the value changed mid operation.

-> In summary imposes discipline on variable assignment.

The Single Responsibility Principle
-----------------------------------
A module should be responsible to one, and only one actor. 

Symptom 1. Accidental Duplication
Symptom 2. Merge issues

This comes about in a class, because in reality things cannot be perfectly descriptive or modular, and business logic
changes. Knowing what is acting on this class is important, and the first sign I have had that you cannot consider classes
in isolation

Solutions
1. Perhaps the simplest is to seperate the functions from the data, and have an EmployeeData class, and three seperate classes for
the other functions.

The downside to this solution is now you have three classes that you have to instantiate and track, and a common solution
to this is to use the facade pattern. 

Facade class, EmployeeFacade, is just responsible for instantiating and delegating to these inner classes.

The Open-Closed Principle
-------------------------
A software artifact should be open for extension but closed for modification. In other words you should be to extend
something without modifying the artifact.

Couple of interesting class ideas:
 -> You don't connect directly to the idea of a database, instead you have a DATA_GATEWAY
 -> You don't connect directly to the idea of a view, instead you have a PRESENTER
    -> It is the presenter which holds all the DATA, and build logic
    -> This means the view only has to worry about displaying
 -> SCREEN_PRESENTER and PRINT_PRESENTER so that we seperate worrying about screens and print

Anytime that the source code dependency arrows go in two directions means that one cannot be changed without changing both.

Golden Depedency Rule:
If A should be protected from changes in B, then B should depend on A.

Higher level components are protected from changes to lower level components.

Information Hiding
Interfaces serve another purpose. They are about information hiding. Without this, you would have transitive dependencies, and we
should not depend on things that we do not directly use.

Liskov Substitution Principle
-----------------------------
A famous violation is a Square is a Rectangle, since if you set height then set width on a square, you end up with
different behaviour.
(Since the user believes they are interacting with a rectangle.)



